SERVER                          CLIENT

SOCKET()                        SOCKET()


BIND()                          


LISTEN()                         CONNECT()


ACCEPT()



READ() && WRITE()                 READ() && WRITE()


CLOSE()                           CLOSE()

_________________________________________


sockaddr
Depends on protocol selected.
struct sockaddr struct and sockaddr _ used with IPv4.

struct sockaddr {
        ushort  sa_family;
        char    sa_data[14];
};

struct sockaddr_in {
        short   sin_family; 
        u_short sin_port; 
        struct  in_addr sin_addr;
        char    sin_zero[8]; 

_________________________________________

htons()

Convert data to network byte order;


_________________________________________


bind()
bind(hListen, (SOCKADDR*)&tListenAddr, sizeof(tListenAddr));
bind(socket, address of socket component structure, size of structure);
Connecting the address information to the socket = The role of the Listen socket is only to approve the connection, but it binds the address information set above to the socket using the bind function.

_________________________________________

Listen()
Changes the state of a socket to a state that is listening for connections. = Puts the socket into a connection waiting state.

_________________________________________

kqueue()
The kqueue() system call allocates a kqueue file descriptor. This file descriptor gives the user a method to find out if a kernel event (kevent) has occurred or if a condition holds, depending on the filter.

_________________________________________


kevent61_s structure
struct kevent64_s
{
    uint64_t ident;  (identifier for this event) */
    int16_t filter; (filter for event) */
    uint16_t flags; /* (general flags) */
    uint32_t fflags; /* (filter-specific flags) */
    int64_t data; /* (filter-specific data) */
    uint64_t udata; /* (opaque user data identifier) */
    uint64_t ext[2]; /* (filter-specific extensions) */
};


__________________________________________


kevent64()
The kevent(), kevent64(), and kevent_qos() system calls return the number of events in the eventlist, up to the value given by nevents. If an error occurs while processing elements in the changelist and there is enough space in the eventlist, the event is placed in the event list with EV_ERROR set in the flag and the system error in the data. Otherwise, -1 is returned and errno is set to indicate an error condition. When timeout expires, kevent(), kevent64(), and kevent_qos() return 0.
EV_SET64()
The EV_SET() macro is provided to easily initialize the kevent structure. Similarly, EV_SET64() initializes a kevent64_s structure and EV_SET_QOS() initializes a kevent_qos_s structure.


__________________________________________

recv()

int send(int socket, const void *msg, size_t len, int flags);
int recv(int socket, void *buf, size_t len, int flags);


int socket: A socket descriptor that is the subject of communication.
send : address of the socket descriptor to receive information
recv : address of the socket descriptor to send the information to
const void *msg : A pointer to the data to be sent to the other party.
void *buf : pointer to the buffer to store the received message
size_t len ​​: The size of the transmitted message (in bytes)
int flag : flag (optional)
return: number of bytes actually transmitted (received), -1 on failure
_________________________________________________


accept()
SOCKET hClient = accept(hListen, (SOCKADDR*)&tClntAddr, &iClntSize);

accept(socket, address of socket element address, address of variable containing the size of the structure);

Accept the connection request using the accept function. Works in a synchronized way (Staying in the waiting state until the request is completed = does not exit this function until a request is received)

If the connection request is accepted, a connected socket is created and returned. Communication using the socket created in this way.

The first argument is a socket.

The second argument contains the address of the client-side address information structure to accept. (SOCKADDR* type conversion)

The third argument contains the address of the variable that stores the size of the structure entered as the second argument.


_________________________________________________